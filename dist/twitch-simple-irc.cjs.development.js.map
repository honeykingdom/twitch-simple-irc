{"version":3,"file":"twitch-simple-irc.cjs.development.js","sources":["../src/utils.ts","../src/parse.ts","../src/normalize.ts","../src/client.ts","../src/types.ts"],"sourcesContent":["import tekko from 'tekko';\n\nexport const getRandomUsername = (): string => {\n  const randomSuffix = Math.floor(Math.random() * 100000)\n    .toString()\n    .padStart(5, '0');\n  return `justinfan${randomSuffix}`;\n};\n\nexport const getIsAction = (message: string): boolean =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\n\nexport const normalizeActionMessage = (message: string): string =>\n  message.slice(8, -1);\n\nexport const getChannelFromMessage = (message: tekko.Message): string =>\n  message.middle[0].slice(1);\n\nexport const isNode = !!(\n  typeof process !== 'undefined' &&\n  process.versions &&\n  process.versions.node\n);\n","import tekko from 'tekko';\nimport { Emotes, BadgeInfo, Badges, TagType } from './types';\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'bits',\n  'ban-duration',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst tagNamesMap: Record<string, string> = {\n  'badge-info': 'badgeInfo',\n  'display-name': 'displayName',\n  'emote-sets': 'emoteSets',\n  'room-id': 'roomId',\n  'tmi-sent-ts': 'tmiSentTs',\n  'user-id': 'userId',\n  'target-msg-id': 'targetMsgId',\n  'target-user-id': 'targetUserId',\n  'msg-id': 'msgId',\n  'system-msg': 'systemMsg',\n  'emote-only': 'emoteOnly',\n  'followers-only': 'followersOnly',\n  'subs-only': 'subsOnly',\n  'ban-duration': 'banDuration',\n  'message-id': 'messageId',\n  'thread-id': 'threadId',\n  'msg-param-cumulative-months': 'msgParamCumulativeMonths',\n  'msg-param-displayName': 'msgParamDisplayName',\n  'msg-param-login': 'msgParamLogin',\n  'msg-param-months': 'msgParamMonths',\n  'msg-param-promo-gift-total': 'msgParamPromoGiftTotal',\n  'msg-param-promo-name': 'msgParamPromoName',\n  'msg-param-recipient-display-name': 'msgParamRecipientDisplayName',\n  'msg-param-recipient-id': 'msgParamRecipientId',\n  'msg-param-recipient-user-name': 'msgParamRecipientUserName',\n  'msg-param-sender-login': 'msgParamSenderLogin',\n  'msg-param-sender-name': 'msgParamSenderName',\n  'msg-param-should-share-streak': 'msgParamShouldShareStreak',\n  'msg-param-streak-months': 'msgParamStreakMonths',\n  'msg-param-sub-plan': 'msgParamSubPlan',\n  'msg-param-sub-plan-name': 'msgParamSubPlanName',\n  'msg-param-viewerCount': 'msgParamViewerCount',\n  'msg-param-ritual-name': 'msgParamRitualName',\n  'msg-param-threshold': 'msgParamThreshold',\n};\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst parseMessageEmotes = (raw: string = ''): Emotes => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data: string = ''): BadgeInfo | Badges => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name: string, value: string): TagType => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly: boolean | number = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow: boolean | number = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (\n  data?: tekko.MessageTags,\n): Record<string, TagType> => {\n  if (!data) {\n    return {};\n  }\n\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    if (depricatedMessageTags.includes(key)) {\n      return acc;\n    }\n\n    const newKey = tagNamesMap[key] || key;\n\n    return {\n      ...acc,\n      [newKey]: normalizeTagValue(key, value as string),\n    };\n  }, {});\n};\n","import tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  MessageEvent,\n  MessageTags,\n  WhisperEvent,\n  WhisperTags,\n} from './types';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  getChannelFromMessage,\n} from './utils';\nimport { parseMessageTags } from './parse';\n\nexport const normalizeChatMessage = (data: TekkoMessage): MessageEvent => {\n  const { raw, trailing, tags, prefix } = data;\n  const { name } = prefix as tekko.MessagePrefix;\n  const isAction = getIsAction(trailing);\n\n  return {\n    raw,\n    message: isAction ? normalizeActionMessage(trailing) : trailing,\n    channel: getChannelFromMessage(data),\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as MessageTags;\n    },\n    isAction,\n  };\n};\n\nexport const normalizeGlobalUserState = ({\n  raw,\n  tags,\n}: TekkoMessage): GlobalUserStateEvent => ({\n  raw,\n  get tags() {\n    return parseMessageTags(tags) as GlobalUserStateTags;\n  },\n});\n\nexport const normalizeState = (data: TekkoMessage) => {\n  const { raw, tags } = data;\n\n  return {\n    raw,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeCommand = (data: TekkoMessage) => {\n  const { raw, trailing, tags } = data;\n\n  return {\n    raw,\n    message: trailing,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeWhisper = ({\n  raw,\n  trailing,\n  tags,\n  prefix,\n  middle: [channel],\n}: TekkoMessage): WhisperEvent => {\n  const { name } = prefix as tekko.MessagePrefix;\n\n  return {\n    raw,\n    message: trailing,\n    channel,\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as WhisperTags;\n    },\n  };\n};\n","import tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport * as tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  MessageEvent,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  UserStateEvent,\n  UserStateTags,\n  RoomStateEvent,\n  RoomStateTags,\n  ClearChatEvent,\n  ClearMessageEvent,\n  HostTargetEvent,\n  NoticeEvent,\n  UserNoticeEvent,\n  WhisperEvent,\n  JoinEvent,\n  PartEvent,\n  PingEvent,\n} from './types';\nimport { isNode, getChannelFromMessage, getRandomUsername } from './utils';\nimport {\n  normalizeChatMessage,\n  normalizeState,\n  normalizeCommand,\n  normalizeWhisper,\n  normalizeGlobalUserState,\n} from './normalize';\n\nexport enum Commands {\n  REPLY001 = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  JOIN = 'JOIN',\n  PART = 'PART',\n  PRIVMSG = 'PRIVMSG',\n  NOTICE = 'NOTICE',\n  USERNOTICE = 'USERNOTICE',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  USERSTATE = 'USERSTATE',\n  ROOMSTATE = 'ROOMSTATE',\n  CLEARCHAT = 'CLEARCHAT',\n  CLEARMSG = 'CLEARMSG',\n  HOSTTARGET = 'HOSTTARGET',\n  WHISPER = 'WHISPER',\n}\n\ninterface ClientOptions {\n  name?: string;\n  auth?: string;\n  secure?: boolean;\n}\n\ninterface Channels {\n  [channel: string]: {\n    userState: UserStateTags;\n    roomState: RoomStateTags;\n  };\n}\n\ntype Listener<T> = (data: T) => void;\n\nexport interface Client {\n  on(event: 'connect', listener: () => void): this;\n  on(event: 'disconnect', listener: (error?: Error) => void): this;\n  on(event: 'register', listener: () => void): this;\n  on(event: 'message', listener: Listener<MessageEvent>): this;\n  on(event: 'notice', listener: Listener<NoticeEvent>): this;\n  on(event: 'usernotice', listener: Listener<UserNoticeEvent>): this;\n  on(event: 'whisper', listener: Listener<WhisperEvent>): this;\n  on(event: 'globaluserstate', listener: Listener<GlobalUserStateEvent>): this;\n  on(event: 'userstate', listener: Listener<UserStateEvent>): this;\n  on(event: 'roomstate', listener: Listener<RoomStateEvent>): this;\n  on(event: 'join', listener: Listener<JoinEvent>): this;\n  on(event: 'part', listener: Listener<PartEvent>): this;\n  on(event: 'clearchat', listener: Listener<ClearChatEvent>): this;\n  on(event: 'clearmessage', listener: Listener<ClearMessageEvent>): this;\n  on(event: 'hosttarget', listener: Listener<HostTargetEvent>): this;\n  on(event: 'ping', listener: Listener<PingEvent>): this;\n  on(event: 'error', listener: (error: Error) => void): this;\n\n  emit(event: 'connect'): boolean;\n  emit(event: 'disconnect', error?: Error): boolean;\n  emit(event: 'register'): boolean;\n  emit(event: 'message', data: MessageEvent): boolean;\n  emit(event: 'notice', data: NoticeEvent): boolean;\n  emit(event: 'usernotice', data: UserNoticeEvent): boolean;\n  emit(event: 'whisper', data: WhisperEvent): boolean;\n  emit(event: 'globaluserstate', data: GlobalUserStateEvent): boolean;\n  emit(event: 'userstate', data: UserStateEvent): boolean;\n  emit(event: 'roomstate', data: RoomStateEvent): boolean;\n  emit(event: 'join', data: JoinEvent): boolean;\n  emit(event: 'part', data: PartEvent): boolean;\n  emit(event: 'clearchat', data: ClearChatEvent): boolean;\n  emit(event: 'clearmessage', data: ClearMessageEvent): boolean;\n  emit(event: 'hosttarget', data: HostTargetEvent): boolean;\n  emit(event: 'ping', data: PingEvent): boolean;\n  emit(event: 'error', error: Error): boolean;\n}\n\nexport class Client extends EventEmitter {\n  socket: WebSocket | Socket | null = null;\n\n  options: ClientOptions;\n\n  globalUserState: GlobalUserStateTags | null = null;\n\n  channels: Channels = {};\n\n  private _connected: boolean = false;\n\n  private _connecting: boolean = false;\n\n  private _registered: boolean = false;\n\n  constructor(options: ClientOptions | null | undefined = {}) {\n    super();\n    this.options = { secure: true, ...options };\n  }\n\n  async connect(): Promise<void> {\n    const connection = isNode\n      ? this._connectInNode()\n      : this._connectInBrowser();\n\n    await connection;\n\n    return this._register();\n  }\n\n  disconnect(): void {\n    if (!this._connected) return;\n\n    if (isNode) {\n      (this.socket as Socket).destroy();\n    } else {\n      (this.socket as WebSocket).close();\n    }\n\n    this.socket = null;\n    this._connected = false;\n    this._connecting = false;\n    this._registered = false;\n\n    this.emit('disconnect');\n  }\n\n  receiveRaw(rawData: string) {\n    const data = rawData.trim().split('\\r\\n');\n\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  sendRaw(message: string): boolean {\n    if (this.socket === null || !message) {\n      return false;\n    }\n\n    if (isNode) {\n      (this.socket as Socket).write(message);\n    } else {\n      (this.socket as WebSocket).send(message);\n    }\n\n    return true;\n  }\n\n  say(channel: string, message: string): boolean {\n    if (!message) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  sendCommand(\n    channel: string,\n    command: string,\n    params: string | Array<string> = '',\n  ): boolean {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  join(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.JOIN,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  part(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.PART,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  _handleMessage(raw: string) {\n    const data: TekkoMessage = tekko.parse(raw) as TekkoMessage;\n    data.raw = raw;\n    const { command } = data;\n\n    if (command === Commands.PING) {\n      this.sendRaw(`${Commands.PONG} :tmi.twitch.tv`);\n      this.emit('ping', { raw });\n\n      return;\n    }\n\n    if (command === Commands.REPLY001) {\n      this.options.name = data.middle[0];\n      this._registered = true;\n\n      this.emit('register');\n\n      return;\n    }\n\n    if (command === Commands.PRIVMSG) {\n      const eventData = normalizeChatMessage(data);\n\n      this.emit('message', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as UserStateEvent;\n\n      this._updateUserState(channel, eventData.tags);\n      this.emit('userstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.JOIN) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as JoinEvent;\n\n      this.emit('join', eventData);\n\n      return;\n    }\n\n    if (command === Commands.PART) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as PartEvent;\n\n      this.emit('part', eventData);\n\n      return;\n    }\n\n    if (command === Commands.ROOMSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = (normalizeState(data) as unknown) as RoomStateEvent;\n\n      this._updateRoomState(channel, eventData.tags);\n      this.emit('roomstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.NOTICE) {\n      const eventData = normalizeCommand(data) as NoticeEvent;\n\n      this.emit('notice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERNOTICE) {\n      const eventData = (normalizeCommand(data) as unknown) as UserNoticeEvent;\n\n      this.emit('usernotice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARCHAT) {\n      const eventData = normalizeCommand(data) as ClearChatEvent;\n\n      this.emit('clearchat', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARMSG) {\n      const eventData = normalizeCommand(data) as ClearMessageEvent;\n\n      this.emit('clearmessage', eventData);\n\n      return;\n    }\n\n    if (command === Commands.HOSTTARGET) {\n      const eventData = normalizeCommand(data) as HostTargetEvent;\n\n      this.emit('hosttarget', eventData);\n\n      return;\n    }\n\n    if (command === Commands.WHISPER) {\n      const eventData = normalizeWhisper(data);\n\n      this.emit('whisper', eventData);\n\n      return;\n    }\n\n    if (command === Commands.GLOBALUSERSTATE) {\n      const eventData = normalizeGlobalUserState(data);\n\n      this._updateGlobalUserState(eventData.tags);\n      this.emit('globaluserstate', eventData);\n\n      return;\n    }\n  }\n\n  _connectInNode(): Promise<void> {\n    const host = 'irc.chat.twitch.tv';\n    const port = this.options.secure ? 6697 : 6667;\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n\n      const handleConnect = () => {\n        this._connecting = false;\n        this._connected = true;\n        this.emit('connect');\n        resolve();\n      };\n\n      if (this.options.secure) {\n        this.socket = tls.connect(port, host, {}, handleConnect);\n      } else {\n        this.socket = new Socket();\n        this.socket.connect(port, host, handleConnect);\n      }\n\n      this.socket.on('error', (error: Error) => {\n        this._connected = false;\n        this._connecting = false;\n        this.emit('disconnect', error);\n        reject(error);\n      });\n      this.socket.on('data', (data: Buffer) => {\n        this.receiveRaw(data.toString());\n      });\n      this.socket.on('close', () => {\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n        this.emit('disconnect');\n      });\n    });\n  }\n\n  _connectInBrowser(): Promise<void> {\n    const url = this.options.secure\n      ? 'wss://irc-ws.chat.twitch.tv:443'\n      : 'ws://irc-ws.chat.twitch.tv:80';\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n      this.socket = new WebSocket(url);\n\n      this.socket.onopen = () => {\n        this._connected = true;\n        this._connecting = false;\n        this.emit('connect');\n        resolve();\n      };\n      this.socket.onmessage = ({ data }) => this.receiveRaw(data);\n      this.socket.onerror = () => {};\n      this.socket.onclose = ({ wasClean, code, reason }) => {\n        this.socket = null;\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n\n        if (wasClean) {\n          this.emit('disconnect');\n        } else {\n          const error = new Error(`[${code}] ${reason}`);\n          this.emit('disconnect', error);\n          reject(error);\n        }\n      };\n    });\n  }\n\n  _register(): Promise<void> {\n    if (!this._connected) return Promise.reject();\n    if (this._registered) return Promise.resolve();\n\n    const { name, auth } = this.options;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw('CAP REQ :twitch.tv/tags twitch.tv/commands');\n    this.sendRaw(`PASS ${pass}`);\n    this.sendRaw(`NICK ${nick}`);\n\n    return new Promise<void>((resolve, reject) => {\n      const handleRegister = () => {\n        resolve();\n        this.off('register', handleRegister);\n      };\n\n      this.on('register', handleRegister);\n\n      setTimeout(() => {\n        reject();\n        this.off('register', handleRegister);\n      }, 10000);\n    });\n  }\n\n  _updateGlobalUserState(globalUserState: GlobalUserStateTags) {\n    this.globalUserState = { ...this.globalUserState, ...globalUserState };\n  }\n\n  _updateUserState(channel: string, userState: UserStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        userState,\n      },\n    };\n  }\n\n  _updateRoomState(channel: string, roomState: RoomStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        roomState,\n      },\n    };\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get registered() {\n    return this._registered;\n  }\n}\n\nexport default Client;\n","import tekko from 'tekko';\n\nexport interface TekkoMessage extends tekko.Message {\n  raw: string;\n}\n\nexport interface Emotes {\n  [emoteId: string]: Array<{ start: number; end: number }>;\n}\n\nexport interface BadgeInfo {\n  /**\n   * The exact number of months the user has been a subscriber.\n   */\n  subscriber?: number;\n}\n\nexport interface Badges {\n  admin?: string;\n  bits?: string;\n  broadcaster?: string;\n  global_mod?: string;\n  moderator?: string;\n  subscriber?: string;\n  staff?: string;\n  turbo?: string;\n}\n\nexport type TagType = string | boolean | number | Emotes | BadgeInfo | Badges;\n\ninterface ATags {\n  /**\n   * Metadata related to the chat badges in the `badges` tag.\n   */\n  badgeInfo: BadgeInfo;\n\n  /**\n   * List of chat badges and the version of each badge.\n   * Many badges have only 1 version, but some badges have different versions (images), depending on how long you hold the badge status; e.g., `subscriber`.\n   */\n  badges: Badges;\n\n  /**\n   * Hexadecimal RGB color code; the empty string if it is never set.\n   */\n  color: string;\n\n  /**\n   * The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.\n   */\n  displayName: string;\n\n  /**\n   * Your emote set, a comma-separated list of emote sets.\n   */\n  emoteSets: string;\n\n  /**\n   * Information to replace text in the message with emote images. This can be empty.\n   */\n  emotes: Emotes;\n\n  /**\n   * A unique ID for the message.\n   */\n  id: string;\n\n  /**\n   * `true` if the user has a moderator badge; otherwise, `false`.\n   */\n  mod: boolean;\n\n  /**\n   * The channel ID.\n   */\n  roomId: string;\n\n  /**\n   * Timestamp when the server received the message.\n   */\n  tmiSentTs: number;\n\n  /**\n   * The user’s ID.\n   */\n  userId: string;\n}\n\nexport interface MessageTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * (Sent only for Bits messages) The amount of cheer/Bits employed by the user.\n   */\n  bits?: number;\n}\n\n/**\n * Sends a message to a channel.\n */\nexport interface MessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: MessageTags;\n  isAction: boolean;\n}\n\nexport type GlobalUserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'userId'\n>;\n\n/**\n * On successful login, provides data about the current logged-in user through IRC tags.\n * It is sent after successfully authenticating (sending a PASS/NICK command).\n */\nexport interface GlobalUserStateEvent {\n  raw: string;\n  tags: GlobalUserStateTags;\n}\n\nexport type UserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'mod'\n>;\n\n/**\n * Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface UserStateEvent {\n  raw: string;\n  channel: string;\n  tags: UserStateTags;\n}\n\nexport interface RoomStateTags extends Pick<ATags, 'roomId'> {\n  /**\n   * Emote-only mode. If enabled, only emotes are allowed in chat.\n   */\n  emoteOnly?: boolean;\n\n  /**\n   * Followers-only mode. If enabled, controls which followers can chat.\n   * Valid values:\n   * -1 (disabled),\n   * false (all followers can chat),\n   * non-negative integer (only users following for at least the specified number of minutes can chat).\n   */\n  followersOnly?: boolean | number;\n\n  /**\n   * R9K mode. If enabled, messages with more than 9 characters must be unique.\n   */\n  r9k?: boolean;\n\n  /**\n   * (Not documented)\n   */\n  rituals?: boolean;\n\n  /**\n   * The number of seconds a chatter without moderator privileges must wait between sending messages.\n   */\n  slow?: boolean | number;\n\n  /**\n   * Subscribers-only mode. If enabled, only subscribers and moderators can chat.\n   */\n  subsOnly?: boolean;\n}\n\n/**\n * Sends room-state data when a user joins a channel or a room setting is changed.\n * For a join, the message contains all chat-room settings.\n * For changes, only the relevant tag is sent.\n */\nexport interface RoomStateEvent {\n  raw: string;\n  channel: string;\n  tags: RoomStateTags;\n}\n\n/**\n * Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).\n */\nexport interface ClearChatEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Duration of the timeout, in seconds. If omitted, the ban is permanent.\n     */\n    banDuration?: number;\n\n    /**\n     * (Not documented)\n     */\n    roomId: string;\n\n    /**\n     * (Not documented)\n     */\n    targetUserId?: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Removes a single message from a channel. This is triggered by the `/delete <targetMsgId>` command on IRC.\n */\nexport interface ClearMessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Name of the user who sent the message.\n     */\n    login: string;\n\n    /**\n     * UUID of the message.\n     */\n    targetMsgId: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Channel starts or stops host mode.\n */\nexport interface HostTargetEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {};\n}\n\n/**\n * General notices from the server.\n */\nexport interface NoticeEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * A message ID string. Can be used for i18ln.\n     * Valid values: see https://dev.twitch.tv/docs/irc/msg-id\n     */\n    msgId: string;\n  };\n}\n\nexport enum UserNoticeType {\n  sub = 'sub',\n  resub = 'resub',\n  subgift = 'subgift',\n  anonsubgift = 'anonsubgift',\n  submysterygift = 'submysterygift',\n  giftpaidupgrade = 'giftpaidupgrade',\n  rewardgift = 'rewardgift',\n  anongiftpaidupgrade = 'anongiftpaidupgrade',\n  raid = 'raid',\n  unraid = 'unraid',\n  ritual = 'ritual',\n  bitsbadgetier = 'bitsbadgetier',\n}\n\ninterface AUserNoticeTags {\n  /**\n   * (Sent only on sub, resub) The total number of months the user has subscribed.\n   * This is the same as msg-param-months but sent for different types of user notices.\n   */\n  msgParamCumulativeMonths: number;\n\n  /**\n   * (Sent only on raid) The display name of the source user raiding this channel.\n   */\n  msgParamDisplayName: string;\n\n  /**\n   * (Sent on only raid) The name of the source user raiding this channel.\n   */\n  msgParamLogin: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The total number of months the user has subscribed.\n   * This is the same as msg-param-cumulative-months but sent for different types of user notices.\n   */\n  msgParamMonths: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The number of gifts the gifter has given during the promo indicated by msg-param-promo-name.\n   */\n  msgParamPromoGiftTotal: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing; e.g. Subtember 2018.\n   */\n  msgParamPromoName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.\n   */\n  msgParamRecipientDisplayName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.\n   */\n  msgParamRecipientId: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.\n   */\n  msgParamRecipientUserName: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The login of the user who gifted the subscription.\n   */\n  msgParamSenderLogin: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.\n   */\n  msgParamSenderName: string;\n\n  /**\n   * (Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.\n   */\n  msgParamShouldShareStreak: boolean;\n\n  /**\n   * (Sent only on sub, resub) The number of consecutive months the user has subscribed. This is 0 if msg-param-should-share-streak is 0.\n   */\n  msgParamStreakMonths: number;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.\n   * Valid values: Prime, 1000, 2000, 3000. 1000, 2000, and 3000 refer to the first, second, and third levels of paid subscriptions, respectively (currently $4.99, $9.99, and $24.99).\n   */\n  msgParamSubPlan: string;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.\n   * This may be a default name or one created by the channel owner.\n   */\n  msgParamSubPlanName: string;\n\n  /**\n   * (Sent only on raid) The number of viewers watching the source channel raiding this channel.\n   */\n  msgParamViewerCount: number;\n\n  /**\n   * (Sent only on ritual) The name of the ritual this notice is for. Valid value: new_chatter.\n   */\n  msgParamRitualName: string;\n\n  /**\n   * (Sent only on bitsbadgetier) The tier of the bits badge the user just earned; e.g. 100, 1000, 10000.\n   */\n  msgParamThreshold: number;\n}\n\ninterface ABaseUserNoticeTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * The name of the user who sent the notice.\n   */\n  login: string;\n\n  /**\n   * The message printed in chat along with this notice.\n   */\n  systemMsg: string;\n}\n\ninterface UserNoticeTagsSub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  /**\n   * The type of notice (not the ID).\n   */\n  msgId: 'sub';\n}\n\ninterface UserNoticeTagsResub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'resub';\n}\n\ninterface UserNoticeTagsSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'subgift';\n}\n\ninterface UserNoticeTagsAnonSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'anonsubgift';\n}\n\ninterface UserNoticeTagsSubMysteryGift extends ABaseUserNoticeTags {\n  msgId: 'submysterygift';\n}\n\ninterface UserNoticeTagsGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamPromoGiftTotal'\n      | 'msgParamPromoName'\n      | 'msgParamSenderLogin'\n      | 'msgParamSenderName'\n    > {\n  msgId: 'giftpaidupgrade';\n}\n\ninterface UserNoticeTagsAnonGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamPromoGiftTotal' | 'msgParamPromoName'> {\n  msgId: 'anongiftpaidupgrade';\n}\n\ninterface UserNoticeTagsRewardGift extends ABaseUserNoticeTags {\n  msgId: 'rewardgift';\n}\n\ninterface UserNoticeTagsRaid\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      'msgParamDisplayName' | 'msgParamLogin' | 'msgParamViewerCount'\n    > {\n  msgId: 'raid';\n}\n\ninterface UserNoticeTagsUnraid extends ABaseUserNoticeTags {\n  msgId: 'unraid';\n}\n\ninterface UserNoticeTagsRitual\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamRitualName'> {\n  msgId: 'ritual';\n}\n\ninterface UserNoticeTagsBitsBadGetier\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamThreshold'> {\n  msgId: 'bitsbadgetier';\n}\n\ntype UserNoticeTags =\n  | UserNoticeTagsSub\n  | UserNoticeTagsResub\n  | UserNoticeTagsSubGift\n  | UserNoticeTagsAnonSubGift\n  | UserNoticeTagsSubMysteryGift\n  | UserNoticeTagsGiftPaidUpgrade\n  | UserNoticeTagsAnonGiftPaidUpgrade\n  | UserNoticeTagsRewardGift\n  | UserNoticeTagsRaid\n  | UserNoticeTagsUnraid\n  | UserNoticeTagsRitual\n  | UserNoticeTagsBitsBadGetier;\n\n/**\n * Sends a notice to the user when any of the following events occurs:\n * - Subscription, resubscription, or gift subscription to a channel.\n * - Incoming raid to a channel.\n *   Raid is a Twitch tool that allows broadcasters to send their viewers to another channel, to help support and grow other members in the community.\n * - Channel ritual.\n *   Many channels have special rituals to celebrate viewer milestones when they are shared.\n *   The rituals notice extends the sharing of these messages to other viewer milestones (initially, a new viewer chatting for the first time).\n */\nexport interface UserNoticeEvent {\n  raw: string;\n  /**\n   * The message. This is omitted if the user did not enter a message.\n   */\n  message: string;\n  channel: string;\n  tags: UserNoticeTags;\n}\n\nexport interface WhisperTags\n  extends Pick<\n    ATags,\n    'badges' | 'color' | 'displayName' | 'emotes' | 'userId'\n  > {\n  /**\n   * (Not documented)\n   */\n  messageId: string;\n\n  /**\n   * (Not documented)\n   */\n  threadId: string;\n}\n\n/**\n * (Not documented)\n */\nexport interface WhisperEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: WhisperTags;\n}\n\nexport interface PingEvent {\n  raw: string;\n}\n\n/**\n * Join a channel.\n */\nexport interface JoinEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n\n/**\n * Depart from a channel.\n */\nexport interface PartEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n"],"names":["getRandomUsername","randomSuffix","Math","floor","random","toString","padStart","getIsAction","message","startsWith","endsWith","normalizeActionMessage","slice","getChannelFromMessage","middle","isNode","process","versions","node","booleanMessageTags","numberMessageTags","tagNamesMap","depricatedMessageTags","parseMessageEmotes","raw","split","reduce","acc","emote","id","indexes","map","index","start","end","Number","parseInt","parseBadges","data","badge","name","value","normalizeTagValue","followersOnly","slow","includes","replace","parseMessageTags","Object","entries","key","newKey","normalizeChatMessage","trailing","tags","prefix","isAction","channel","user","normalizeGlobalUserState","normalizeState","normalizeCommand","normalizeWhisper","Commands","Client","options","secure","connect","connection","_connectInNode","_connectInBrowser","_register","disconnect","_connected","socket","destroy","close","_connecting","_registered","emit","receiveRaw","rawData","trim","forEach","line","_handleMessage","sendRaw","write","send","say","ircMessage","tekko","command","PRIVMSG","sendCommand","params","commandParams","Array","isArray","join","JOIN","part","PART","PING","PONG","REPLY001","eventData","USERSTATE","_updateUserState","ROOMSTATE","_updateRoomState","NOTICE","USERNOTICE","CLEARCHAT","CLEARMSG","HOSTTARGET","WHISPER","GLOBALUSERSTATE","_updateGlobalUserState","host","port","Promise","resolve","reject","handleConnect","tls","Socket","on","error","url","WebSocket","onopen","onmessage","onerror","onclose","wasClean","code","reason","Error","auth","nick","pass","handleRegister","off","setTimeout","globalUserState","userState","channels","roomState","EventEmitter","UserNoticeType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEaA,iBAAiB,GAAG,SAApBA,iBAAoB;AAC/B,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,EAClBC,QADkB,GAElBC,QAFkB,CAET,CAFS,EAEN,GAFM,CAArB;AAGA,uBAAmBL,YAAnB;AACD;IAEYM,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD;AAAA,SACzBA,OAAO,CAACC,UAAR,CAAmB,aAAnB,KAAuCD,OAAO,CAACE,QAAR,CAAiB,MAAjB,CADd;AAAA;IAGdC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACH,OAAD;AAAA,SACpCA,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiB,CAAC,CAAlB,CADoC;AAAA;IAGzBC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACL,OAAD;AAAA,SACnCA,OAAO,CAACM,MAAR,CAAe,CAAf,EAAkBF,KAAlB,CAAwB,CAAxB,CADmC;AAAA;IAGxBG,MAAM,GAAG,CAAC,EACrB,OAAOC,OAAP,KAAmB,WAAnB,IACAA,OAAO,CAACC,QADR,IAEAD,OAAO,CAACC,QAAR,CAAiBC,IAHI;;ACfvB,IAAMC,kBAAkB,GAAG,CACzB,KADyB,EAEzB,YAFyB,EAGzB,KAHyB,EAIzB,SAJyB,EAKzB,WALyB,EAMzB,+BANyB,CAA3B;AASA,IAAMC,iBAAiB,GAAG,CACxB,aADwB,EAExB,MAFwB,EAGxB,cAHwB,EAIxB,6BAJwB,EAKxB,kBALwB,EAMxB,4BANwB,EAOxB,yBAPwB,EAQxB,uBARwB,EASxB,qBATwB,CAA1B;AAYA,IAAMC,WAAW,GAA2B;AAC1C,gBAAc,WAD4B;AAE1C,kBAAgB,aAF0B;AAG1C,gBAAc,WAH4B;AAI1C,aAAW,QAJ+B;AAK1C,iBAAe,WAL2B;AAM1C,aAAW,QAN+B;AAO1C,mBAAiB,aAPyB;AAQ1C,oBAAkB,cARwB;AAS1C,YAAU,OATgC;AAU1C,gBAAc,WAV4B;AAW1C,gBAAc,WAX4B;AAY1C,oBAAkB,eAZwB;AAa1C,eAAa,UAb6B;AAc1C,kBAAgB,aAd0B;AAe1C,gBAAc,WAf4B;AAgB1C,eAAa,UAhB6B;AAiB1C,iCAA+B,0BAjBW;AAkB1C,2BAAyB,qBAlBiB;AAmB1C,qBAAmB,eAnBuB;AAoB1C,sBAAoB,gBApBsB;AAqB1C,gCAA8B,wBArBY;AAsB1C,0BAAwB,mBAtBkB;AAuB1C,sCAAoC,8BAvBM;AAwB1C,4BAA0B,qBAxBgB;AAyB1C,mCAAiC,2BAzBS;AA0B1C,4BAA0B,qBA1BgB;AA2B1C,2BAAyB,oBA3BiB;AA4B1C,mCAAiC,2BA5BS;AA6B1C,6BAA2B,sBA7Be;AA8B1C,wBAAsB,iBA9BoB;AA+B1C,6BAA2B,qBA/Be;AAgC1C,2BAAyB,qBAhCiB;AAiC1C,2BAAyB,oBAjCiB;AAkC1C,yBAAuB;AAlCmB,CAA5C;AAqCA,IAAMC,qBAAqB,GAAG,CAAC,YAAD,EAAe,OAAf,EAAwB,WAAxB,CAA9B;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,GAAD;MAACA;AAAAA,IAAAA,MAAc;;;AACxC,MAAI,CAACA,GAAL,EAAU,OAAO,EAAP;AAEV,SAAOA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAsB,UAACC,GAAD,EAAMC,KAAN;;;uBACLA,KAAK,CAACH,KAAN,CAAY,GAAZ;QAAfI;QAAIC;;AAEX,wBACKH,GADL,6BAEGE,EAFH,IAEQC,OAAO,CAACL,KAAR,CAAc,GAAd,EAAmBM,GAAnB,CAAuB,UAACC,KAAD;yBACNA,KAAK,CAACP,KAAN,CAAY,GAAZ;UAAdQ;UAAOC;;AAEd,aAAO;AACLD,QAAAA,KAAK,EAAEE,MAAM,CAACC,QAAP,CAAgBH,KAAhB,EAAuB,EAAvB,CADF;AAELC,QAAAA,GAAG,EAAEC,MAAM,CAACC,QAAP,CAAgBF,GAAhB,EAAqB,EAArB;AAFA,OAAP;AAID,KAPK,CAFR;AAWD,GAdM,EAcJ,EAdI,CAAP;AAeD,CAlBD;;AAoBA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD;MAACA;AAAAA,IAAAA,OAAe;;;AAClC,MAAI,CAACA,IAAL,EAAW,OAAO,EAAP;AAEX,SAAOA,IAAI,CAACb,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,UAACC,GAAD,EAAMY,KAAN;;;uBACNA,KAAK,CAACd,KAAN,CAAY,GAAZ;QAAfe;QAAMC;;AAEb,wBACKd,GADL,6BAEGa,IAFH,IAEUC,KAFV;AAID,GAPM,EAOJ,EAPI,CAAP;AAQD,CAXD;;AAaA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACF,IAAD,EAAeC,KAAf;AACxB,MAAID,IAAI,KAAK,QAAb,EAAuB,OAAOjB,kBAAkB,CAACkB,KAAD,CAAzB;AACvB,MAAID,IAAI,KAAK,QAAb,EAAuB,OAAOH,WAAW,CAACI,KAAD,CAAlB;AACvB,MAAID,IAAI,KAAK,YAAb,EAA2B,OAAOH,WAAW,CAACI,KAAD,CAAlB;;AAE3B,MAAID,IAAI,KAAK,gBAAb,EAA+B;AAC7B,QAAIG,aAAa,GAAqB,KAAtC;;AACA,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClBE,MAAAA,aAAa,GAAG,KAAhB;AACD,KAFD,MAEO,IAAIF,KAAK,KAAK,GAAd,EAAmB;AACxBE,MAAAA,aAAa,GAAG,IAAhB;AACD,KAFM,MAEA,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AACpCE,MAAAA,aAAa,GAAGP,QAAQ,CAACK,KAAD,EAAQ,EAAR,CAAxB;AACD;;AACD,WAAOE,aAAP;AACD;;AAED,MAAIH,IAAI,KAAK,MAAb,EAAqB;AACnB,QAAII,IAAI,GAAqB,KAA7B;;AACA,QAAIH,KAAK,KAAK,GAAd,EAAmB;AACjBG,MAAAA,IAAI,GAAG,KAAP;AACD,KAFD,MAEO,IAAI,OAAOH,KAAP,KAAiB,QAArB,EAA+B;AACpCG,MAAAA,IAAI,GAAGR,QAAQ,CAACK,KAAD,EAAQ,EAAR,CAAf;AACD;;AACD,WAAOG,IAAP;AACD;;AAED,MAAIzB,kBAAkB,CAAC0B,QAAnB,CAA4BL,IAA5B,CAAJ,EAAuC,OAAOC,KAAK,KAAK,GAAjB;AACvC,MAAIrB,iBAAiB,CAACyB,QAAlB,CAA2BL,IAA3B,CAAJ,EAAsC,OAAOJ,QAAQ,CAACK,KAAD,EAAQ,EAAR,CAAf;;AAEtC,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAACK,OAAN,CAAc,KAAd,EAAqB,GAArB,CAAP;AACD;;AAED,SAAOL,KAAP;AACD,CAnCD;;AAqCA,IAAaM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAC9BT,IAD8B;AAG9B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,SAAOU,MAAM,CAACC,OAAP,CAAeX,IAAf,EAAqBZ,MAArB,CAA4B,UAACC,GAAD;;;QAAOuB;QAAKT;;AAC7C,QAAInB,qBAAqB,CAACuB,QAAtB,CAA+BK,GAA/B,CAAJ,EAAyC;AACvC,aAAOvB,GAAP;AACD;;AAED,QAAMwB,MAAM,GAAG9B,WAAW,CAAC6B,GAAD,CAAX,IAAoBA,GAAnC;AAEA,wBACKvB,GADL,6BAEGwB,MAFH,IAEYT,iBAAiB,CAACQ,GAAD,EAAMT,KAAN,CAF7B;AAID,GAXM,EAWJ,EAXI,CAAP;AAYD,CAnBM;;ACnHA,IAAMW,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACd,IAAD;MAC1Bd,MAAgCc,KAAhCd;MAAK6B,WAA2Bf,KAA3Be;MAAUC,OAAiBhB,KAAjBgB;MAAMC,SAAWjB,KAAXiB;MACrBf,OAASe,OAATf;AACR,MAAMgB,QAAQ,GAAGjD,WAAW,CAAC8C,QAAD,CAA5B;AAEA,SAAO;AACL7B,IAAAA,GAAG,EAAHA,GADK;AAELhB,IAAAA,OAAO,EAAEgD,QAAQ,GAAG7C,sBAAsB,CAAC0C,QAAD,CAAzB,GAAsCA,QAFlD;AAGLI,IAAAA,OAAO,EAAE5C,qBAAqB,CAACyB,IAAD,CAHzB;AAILoB,IAAAA,IAAI,EAAElB,IAJD;;AAKL,QAAIc,IAAJ;AACE,aAAQP,gBAAgB,CAACO,IAAD,CAAxB;AACD,KAPI;;AAQLE,IAAAA,QAAQ,EAARA;AARK,GAAP;AAUD,CAfM;AAiBP,AAAO,IAAMG,wBAAwB,GAAG,SAA3BA,wBAA2B;AAAA,MACtCnC,GADsC,QACtCA,GADsC;AAAA,MAEtC8B,IAFsC,QAEtCA,IAFsC;AAAA,SAGG;AACzC9B,IAAAA,GAAG,EAAHA,GADyC;;AAEzC,QAAI8B,IAAJ;AACE,aAAOP,gBAAgB,CAACO,IAAD,CAAvB;AACD;;AAJwC,GAHH;AAAA,CAAjC;AAUP,AAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACtB,IAAD;MACpBd,MAAcc,KAAdd;MAAK8B,OAAShB,KAATgB;AAEb,SAAO;AACL9B,IAAAA,GAAG,EAAHA,GADK;AAELiC,IAAAA,OAAO,EAAE5C,qBAAqB,CAACyB,IAAD,CAFzB;;AAGL,QAAIgB,IAAJ;AACE,aAAOP,gBAAgB,CAACO,IAAD,CAAvB;AACD;;AALI,GAAP;AAOD,CAVM;AAYP,AAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACvB,IAAD;MACtBd,MAAwBc,KAAxBd;MAAK6B,WAAmBf,KAAnBe;MAAUC,OAAShB,KAATgB;AAEvB,SAAO;AACL9B,IAAAA,GAAG,EAAHA,GADK;AAELhB,IAAAA,OAAO,EAAE6C,QAFJ;AAGLI,IAAAA,OAAO,EAAE5C,qBAAqB,CAACyB,IAAD,CAHzB;;AAIL,QAAIgB,IAAJ;AACE,aAAOP,gBAAgB,CAACO,IAAD,CAAvB;AACD;;AANI,GAAP;AAQD,CAXM;AAaP,AAAO,IAAMQ,gBAAgB,GAAG,SAAnBA,gBAAmB;MAC9BtC,YAAAA;MACA6B,iBAAAA;MACAC,aAAAA;MACAC,eAAAA;2BACAzC;MAAS2C;MAEDjB,OAASe,OAATf;AAER,SAAO;AACLhB,IAAAA,GAAG,EAAHA,GADK;AAELhB,IAAAA,OAAO,EAAE6C,QAFJ;AAGLI,IAAAA,OAAO,EAAPA,OAHK;AAILC,IAAAA,IAAI,EAAElB,IAJD;;AAKL,QAAIc,IAAJ;AACE,aAAQP,gBAAgB,CAACO,IAAD,CAAxB;AACD;;AAPI,GAAP;AASD,CAlBM;;ACrCP,WAAYS;AACVA,EAAAA,oBAAA,QAAA;AACAA,EAAAA,gBAAA,SAAA;AACAA,EAAAA,gBAAA,SAAA;AACAA,EAAAA,gBAAA,SAAA;AACAA,EAAAA,gBAAA,SAAA;AACAA,EAAAA,mBAAA,YAAA;AACAA,EAAAA,kBAAA,WAAA;AACAA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,2BAAA,oBAAA;AACAA,EAAAA,qBAAA,cAAA;AACAA,EAAAA,qBAAA,cAAA;AACAA,EAAAA,qBAAA,cAAA;AACAA,EAAAA,oBAAA,aAAA;AACAA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,mBAAA,YAAA;AACD,CAhBD,EAAYA,gBAAQ,KAARA,gBAAQ,KAAA,CAApB;;AAuEA,IAAaC,MAAb;AAAA;;AAeE,kBAAYC,OAAZ;;;QAAYA;AAAAA,MAAAA,UAA4C;;;AACtD;AAfF,gBAAA,GAAoC,IAApC;AAIA,yBAAA,GAA8C,IAA9C;AAEA,kBAAA,GAAqB,EAArB;AAEQ,oBAAA,GAAsB,KAAtB;AAEA,qBAAA,GAAuB,KAAvB;AAEA,qBAAA,GAAuB,KAAvB;AAIN,UAAKA,OAAL;AAAiBC,MAAAA,MAAM,EAAE;AAAzB,OAAkCD,OAAlC;;AACD;;AAlBH;;AAAA,SAoBQE,OApBR;AAAA;mBAsBQ;;AADJ,UAAMC,UAAU,GAAGrD,MAAM,GACrB,OAAKsD,cAAL,EADqB,GAErB,OAAKC,iBAAL,EAFJ;6BAIMF;AAEN,eAAO,OAAKG,SAAL,EAAP;;AACD,KA5BH;AAAA;AAAA;AAAA;;AAAA,SA8BEC,UA9BF,GA8BE;AACE,QAAI,CAAC,KAAKC,UAAV,EAAsB;;AAEtB,QAAI1D,MAAJ,EAAY;AACT,WAAK2D,MAAL,CAAuBC,OAAvB;AACF,KAFD,MAEO;AACJ,WAAKD,MAAL,CAA0BE,KAA1B;AACF;;AAED,SAAKF,MAAL,GAAc,IAAd;AACA,SAAKD,UAAL,GAAkB,KAAlB;AACA,SAAKI,WAAL,GAAmB,KAAnB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AAEA,SAAKC,IAAL,CAAU,YAAV;AACD,GA7CH;;AAAA,SA+CEC,UA/CF,GA+CE,oBAAWC,OAAX;;;AACE,QAAM3C,IAAI,GAAG2C,OAAO,CAACC,IAAR,GAAezD,KAAf,CAAqB,MAArB,CAAb;AAEAa,IAAAA,IAAI,CAAC6C,OAAL,CAAa,UAACC,IAAD;AAAA,aAAU,MAAI,CAACC,cAAL,CAAoBD,IAApB,CAAV;AAAA,KAAb;AACD,GAnDH;;AAAA,SAqDEE,OArDF,GAqDE,iBAAQ9E,OAAR;AACE,QAAI,KAAKkE,MAAL,KAAgB,IAAhB,IAAwB,CAAClE,OAA7B,EAAsC;AACpC,aAAO,KAAP;AACD;;AAED,QAAIO,MAAJ,EAAY;AACT,WAAK2D,MAAL,CAAuBa,KAAvB,CAA6B/E,OAA7B;AACF,KAFD,MAEO;AACJ,WAAKkE,MAAL,CAA0Bc,IAA1B,CAA+BhF,OAA/B;AACF;;AAED,WAAO,IAAP;AACD,GAjEH;;AAAA,SAmEEiF,GAnEF,GAmEE,aAAIhC,OAAJ,EAAqBjD,OAArB;AACE,QAAI,CAACA,OAAL,EAAc,OAAO,KAAP;AAEd,QAAMkF,UAAU,GAAGC,YAAA,CAAa;AAC9BC,MAAAA,OAAO,EAAE7B,gBAAQ,CAAC8B,OADY;AAE9B/E,MAAAA,MAAM,EAAE,OAAK2C,OAAL,CAFsB;AAG9BJ,MAAAA,QAAQ,EAAE7C;AAHoB,KAAb,CAAnB;AAMA,WAAO,KAAK8E,OAAL,CAAaI,UAAb,CAAP;AACD,GA7EH;;AAAA,SA+EEI,WA/EF,GA+EE,qBACErC,OADF,EAEEmC,OAFF,EAGEG,MAHF;QAGEA;AAAAA,MAAAA,SAAiC;;;AAEjC,QAAMC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAwBA,MAAM,CAACI,IAAP,CAAY,GAAZ,CAAxB,GAA2CJ,MAAjE;AACA,QAAML,UAAU,GAAGC,YAAA,CAAa;AAC9BC,MAAAA,OAAO,EAAE7B,gBAAQ,CAAC8B,OADY;AAE9B/E,MAAAA,MAAM,EAAE,OAAK2C,OAAL,CAFsB;AAG9BJ,MAAAA,QAAQ,QAAMuC,OAAN,SAAiBI;AAHK,KAAb,CAAnB;AAMA,WAAO,KAAKV,OAAL,CAAaI,UAAb,CAAP;AACD,GA5FH;;AAAA,SA8FES,IA9FF,GA8FE,cAAK1C,OAAL;AACE,QAAI,CAAC,KAAKqB,WAAV,EAAuB,OAAO,KAAP;AAEvB,QAAMY,UAAU,GAAGC,YAAA,CAAa;AAC9BC,MAAAA,OAAO,EAAE7B,gBAAQ,CAACqC,IADY;AAE9BtF,MAAAA,MAAM,EAAE,OAAK2C,OAAL;AAFsB,KAAb,CAAnB;AAKA,WAAO,KAAK6B,OAAL,CAAaI,UAAb,CAAP;AACD,GAvGH;;AAAA,SAyGEW,IAzGF,GAyGE,cAAK5C,OAAL;AACE,QAAI,CAAC,KAAKqB,WAAV,EAAuB,OAAO,KAAP;AAEvB,QAAMY,UAAU,GAAGC,YAAA,CAAa;AAC9BC,MAAAA,OAAO,EAAE7B,gBAAQ,CAACuC,IADY;AAE9BxF,MAAAA,MAAM,EAAE,OAAK2C,OAAL;AAFsB,KAAb,CAAnB;AAKA,WAAO,KAAK6B,OAAL,CAAaI,UAAb,CAAP;AACD,GAlHH;;AAAA,SAoHEL,cApHF,GAoHE,wBAAe7D,GAAf;AACE,QAAMc,IAAI,GAAiBqD,WAAA,CAAYnE,GAAZ,CAA3B;AACAc,IAAAA,IAAI,CAACd,GAAL,GAAWA,GAAX;QACQoE,UAAYtD,KAAZsD;;AAER,QAAIA,OAAO,KAAK7B,gBAAQ,CAACwC,IAAzB,EAA+B;AAC7B,WAAKjB,OAAL,CAAgBvB,gBAAQ,CAACyC,IAAzB;AACA,WAAKzB,IAAL,CAAU,MAAV,EAAkB;AAAEvD,QAAAA,GAAG,EAAHA;AAAF,OAAlB;AAEA;AACD;;AAED,QAAIoE,OAAO,KAAK7B,gBAAQ,CAAC0C,QAAzB,EAAmC;AACjC,WAAKxC,OAAL,CAAazB,IAAb,GAAoBF,IAAI,CAACxB,MAAL,CAAY,CAAZ,CAApB;AACA,WAAKgE,WAAL,GAAmB,IAAnB;AAEA,WAAKC,IAAL,CAAU,UAAV;AAEA;AACD;;AAED,QAAIa,OAAO,KAAK7B,gBAAQ,CAAC8B,OAAzB,EAAkC;AAChC,UAAMa,SAAS,GAAGtD,oBAAoB,CAACd,IAAD,CAAtC;AAEA,WAAKyC,IAAL,CAAU,SAAV,EAAqB2B,SAArB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAAC4C,SAAzB,EAAoC;AAClC,UAAMlD,OAAO,GAAG5C,qBAAqB,CAACyB,IAAD,CAArC;;AACA,UAAMoE,UAAS,GAAG9C,cAAc,CAACtB,IAAD,CAAhC;;AAEA,WAAKsE,gBAAL,CAAsBnD,OAAtB,EAA+BiD,UAAS,CAACpD,IAAzC;;AACA,WAAKyB,IAAL,CAAU,WAAV,EAAuB2B,UAAvB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACqC,IAAzB,EAA+B;AAC7B,UAAM3C,QAAO,GAAG5C,qBAAqB,CAACyB,IAAD,CAArC;;AACA,UAAMoE,WAAS,GAAG;AAAEjD,QAAAA,OAAO,EAAPA;AAAF,OAAlB;AAEA,WAAKsB,IAAL,CAAU,MAAV,EAAkB2B,WAAlB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACuC,IAAzB,EAA+B;AAC7B,UAAM7C,SAAO,GAAG5C,qBAAqB,CAACyB,IAAD,CAArC;;AACA,UAAMoE,WAAS,GAAG;AAAEjD,QAAAA,OAAO,EAAPA;AAAF,OAAlB;AAEA,WAAKsB,IAAL,CAAU,MAAV,EAAkB2B,WAAlB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAAC8C,SAAzB,EAAoC;AAClC,UAAMpD,SAAO,GAAG5C,qBAAqB,CAACyB,IAAD,CAArC;;AACA,UAAMoE,WAAS,GAAI9C,cAAc,CAACtB,IAAD,CAAjC;;AAEA,WAAKwE,gBAAL,CAAsBrD,SAAtB,EAA+BiD,WAAS,CAACpD,IAAzC;;AACA,WAAKyB,IAAL,CAAU,WAAV,EAAuB2B,WAAvB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACgD,MAAzB,EAAiC;AAC/B,UAAML,WAAS,GAAG7C,gBAAgB,CAACvB,IAAD,CAAlC;;AAEA,WAAKyC,IAAL,CAAU,QAAV,EAAoB2B,WAApB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACiD,UAAzB,EAAqC;AACnC,UAAMN,WAAS,GAAI7C,gBAAgB,CAACvB,IAAD,CAAnC;;AAEA,WAAKyC,IAAL,CAAU,YAAV,EAAwB2B,WAAxB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACkD,SAAzB,EAAoC;AAClC,UAAMP,WAAS,GAAG7C,gBAAgB,CAACvB,IAAD,CAAlC;;AAEA,WAAKyC,IAAL,CAAU,WAAV,EAAuB2B,WAAvB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACmD,QAAzB,EAAmC;AACjC,UAAMR,WAAS,GAAG7C,gBAAgB,CAACvB,IAAD,CAAlC;;AAEA,WAAKyC,IAAL,CAAU,cAAV,EAA0B2B,WAA1B;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACoD,UAAzB,EAAqC;AACnC,UAAMT,WAAS,GAAG7C,gBAAgB,CAACvB,IAAD,CAAlC;;AAEA,WAAKyC,IAAL,CAAU,YAAV,EAAwB2B,WAAxB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACqD,OAAzB,EAAkC;AAChC,UAAMV,YAAS,GAAG5C,gBAAgB,CAACxB,IAAD,CAAlC;;AAEA,WAAKyC,IAAL,CAAU,SAAV,EAAqB2B,YAArB;AAEA;AACD;;AAED,QAAId,OAAO,KAAK7B,gBAAQ,CAACsD,eAAzB,EAA0C;AACxC,UAAMX,YAAS,GAAG/C,wBAAwB,CAACrB,IAAD,CAA1C;;AAEA,WAAKgF,sBAAL,CAA4BZ,YAAS,CAACpD,IAAtC;;AACA,WAAKyB,IAAL,CAAU,iBAAV,EAA6B2B,YAA7B;AAEA;AACD;AACF,GA/OH;;AAAA,SAiPErC,cAjPF,GAiPE;;;AACE,QAAMkD,IAAI,GAAG,oBAAb;AACA,QAAMC,IAAI,GAAG,KAAKvD,OAAL,CAAaC,MAAb,GAAsB,IAAtB,GAA6B,IAA1C;AAEA,WAAO,IAAIuD,OAAJ,CAAkB,UAACC,OAAD,EAAUC,MAAV;AACvB,MAAA,MAAI,CAAC9C,WAAL,GAAmB,IAAnB;;AAEA,UAAM+C,aAAa,GAAG,SAAhBA,aAAgB;AACpB,QAAA,MAAI,CAAC/C,WAAL,GAAmB,KAAnB;AACA,QAAA,MAAI,CAACJ,UAAL,GAAkB,IAAlB;;AACA,QAAA,MAAI,CAACM,IAAL,CAAU,SAAV;;AACA2C,QAAAA,OAAO;AACR,OALD;;AAOA,UAAI,MAAI,CAACzD,OAAL,CAAaC,MAAjB,EAAyB;AACvB,QAAA,MAAI,CAACQ,MAAL,GAAcmD,GAAG,CAAC1D,OAAJ,CAAYqD,IAAZ,EAAkBD,IAAlB,EAAwB,EAAxB,EAA4BK,aAA5B,CAAd;AACD,OAFD,MAEO;AACL,QAAA,MAAI,CAAClD,MAAL,GAAc,IAAIoD,UAAJ,EAAd;;AACA,QAAA,MAAI,CAACpD,MAAL,CAAYP,OAAZ,CAAoBqD,IAApB,EAA0BD,IAA1B,EAAgCK,aAAhC;AACD;;AAED,MAAA,MAAI,CAAClD,MAAL,CAAYqD,EAAZ,CAAe,OAAf,EAAwB,UAACC,KAAD;AACtB,QAAA,MAAI,CAACvD,UAAL,GAAkB,KAAlB;AACA,QAAA,MAAI,CAACI,WAAL,GAAmB,KAAnB;;AACA,QAAA,MAAI,CAACE,IAAL,CAAU,YAAV,EAAwBiD,KAAxB;;AACAL,QAAAA,MAAM,CAACK,KAAD,CAAN;AACD,OALD;;AAMA,MAAA,MAAI,CAACtD,MAAL,CAAYqD,EAAZ,CAAe,MAAf,EAAuB,UAACzF,IAAD;AACrB,QAAA,MAAI,CAAC0C,UAAL,CAAgB1C,IAAI,CAACjC,QAAL,EAAhB;AACD,OAFD;;AAGA,MAAA,MAAI,CAACqE,MAAL,CAAYqD,EAAZ,CAAe,OAAf,EAAwB;AACtB,QAAA,MAAI,CAACtD,UAAL,GAAkB,KAAlB;AACA,QAAA,MAAI,CAACI,WAAL,GAAmB,KAAnB;AACA,QAAA,MAAI,CAACC,WAAL,GAAmB,KAAnB;;AACA,QAAA,MAAI,CAACC,IAAL,CAAU,YAAV;AACD,OALD;AAMD,KAhCM,CAAP;AAiCD,GAtRH;;AAAA,SAwRET,iBAxRF,GAwRE;;;AACE,QAAM2D,GAAG,GAAG,KAAKhE,OAAL,CAAaC,MAAb,GACR,iCADQ,GAER,+BAFJ;AAIA,WAAO,IAAIuD,OAAJ,CAAkB,UAACC,OAAD,EAAUC,MAAV;AACvB,MAAA,MAAI,CAAC9C,WAAL,GAAmB,IAAnB;AACA,MAAA,MAAI,CAACH,MAAL,GAAc,IAAIwD,SAAJ,CAAcD,GAAd,CAAd;;AAEA,MAAA,MAAI,CAACvD,MAAL,CAAYyD,MAAZ,GAAqB;AACnB,QAAA,MAAI,CAAC1D,UAAL,GAAkB,IAAlB;AACA,QAAA,MAAI,CAACI,WAAL,GAAmB,KAAnB;;AACA,QAAA,MAAI,CAACE,IAAL,CAAU,SAAV;;AACA2C,QAAAA,OAAO;AACR,OALD;;AAMA,MAAA,MAAI,CAAChD,MAAL,CAAY0D,SAAZ,GAAwB;AAAA,YAAG9F,IAAH,QAAGA,IAAH;AAAA,eAAc,MAAI,CAAC0C,UAAL,CAAgB1C,IAAhB,CAAd;AAAA,OAAxB;;AACA,MAAA,MAAI,CAACoC,MAAL,CAAY2D,OAAZ,GAAsB,cAAtB;;AACA,MAAA,MAAI,CAAC3D,MAAL,CAAY4D,OAAZ,GAAsB;YAAGC,iBAAAA;YAAUC,aAAAA;YAAMC,eAAAA;AACvC,QAAA,MAAI,CAAC/D,MAAL,GAAc,IAAd;AACA,QAAA,MAAI,CAACD,UAAL,GAAkB,KAAlB;AACA,QAAA,MAAI,CAACI,WAAL,GAAmB,KAAnB;AACA,QAAA,MAAI,CAACC,WAAL,GAAmB,KAAnB;;AAEA,YAAIyD,QAAJ,EAAc;AACZ,UAAA,MAAI,CAACxD,IAAL,CAAU,YAAV;AACD,SAFD,MAEO;AACL,cAAMiD,KAAK,GAAG,IAAIU,KAAJ,OAAcF,IAAd,UAAuBC,MAAvB,CAAd;;AACA,UAAA,MAAI,CAAC1D,IAAL,CAAU,YAAV,EAAwBiD,KAAxB;;AACAL,UAAAA,MAAM,CAACK,KAAD,CAAN;AACD;AACF,OAbD;AAcD,KA1BM,CAAP;AA2BD,GAxTH;;AAAA,SA0TEzD,SA1TF,GA0TE;;;AACE,QAAI,CAAC,KAAKE,UAAV,EAAsB,OAAOgD,OAAO,CAACE,MAAR,EAAP;AACtB,QAAI,KAAK7C,WAAT,EAAsB,OAAO2C,OAAO,CAACC,OAAR,EAAP;wBAEC,KAAKzD;QAApBzB,qBAAAA;QAAMmG,qBAAAA;AAEd,QAAMC,IAAI,GAAGpG,IAAI,IAAIxC,iBAAiB,EAAtC;AACA,QAAM6I,IAAI,GAAGF,IAAI,cAAYA,IAAZ,GAAqB,YAAtC;AAEA,SAAKrD,OAAL,CAAa,4CAAb;AACA,SAAKA,OAAL,WAAqBuD,IAArB;AACA,SAAKvD,OAAL,WAAqBsD,IAArB;AAEA,WAAO,IAAInB,OAAJ,CAAkB,UAACC,OAAD,EAAUC,MAAV;AACvB,UAAMmB,cAAc,GAAG,SAAjBA,cAAiB;AACrBpB,QAAAA,OAAO;;AACP,QAAA,MAAI,CAACqB,GAAL,CAAS,UAAT,EAAqBD,cAArB;AACD,OAHD;;AAKA,MAAA,MAAI,CAACf,EAAL,CAAQ,UAAR,EAAoBe,cAApB;;AAEAE,MAAAA,UAAU,CAAC;AACTrB,QAAAA,MAAM;;AACN,QAAA,MAAI,CAACoB,GAAL,CAAS,UAAT,EAAqBD,cAArB;AACD,OAHS,EAGP,KAHO,CAAV;AAID,KAZM,CAAP;AAaD,GApVH;;AAAA,SAsVExB,sBAtVF,GAsVE,gCAAuB2B,eAAvB;AACE,SAAKA,eAAL,gBAA4B,KAAKA,eAAjC,EAAqDA,eAArD;AACD,GAxVH;;AAAA,SA0VErC,gBA1VF,GA0VE,0BAAiBnD,OAAjB,EAAkCyF,SAAlC;;;AACE,SAAKC,QAAL,gBACK,KAAKA,QADV,6BAEG1F,OAFH,iBAGO,KAAK0F,QAAL,CAAc1F,OAAd,CAHP;AAIIyF,MAAAA,SAAS,EAATA;AAJJ;AAOD,GAlWH;;AAAA,SAoWEpC,gBApWF,GAoWE,0BAAiBrD,OAAjB,EAAkC2F,SAAlC;;;AACE,SAAKD,QAAL,gBACK,KAAKA,QADV,6BAEG1F,OAFH,iBAGO,KAAK0F,QAAL,CAAc1F,OAAd,CAHP;AAII2F,MAAAA,SAAS,EAATA;AAJJ;AAOD,GA5WH;;AAAA;AAAA;AAAA;AA+WI,aAAO,KAAK3E,UAAZ;AACD;AAhXH;AAAA;AAAA;AAmXI,aAAO,KAAKI,WAAZ;AACD;AApXH;AAAA;AAAA;AAuXI,aAAO,KAAKC,WAAZ;AACD;AAxXH;;AAAA;AAAA,EAA4BuE,mBAA5B;;AC4KA,WAAYC;AACVA,EAAAA,qBAAA,QAAA;AACAA,EAAAA,uBAAA,UAAA;AACAA,EAAAA,yBAAA,YAAA;AACAA,EAAAA,6BAAA,gBAAA;AACAA,EAAAA,gCAAA,mBAAA;AACAA,EAAAA,iCAAA,oBAAA;AACAA,EAAAA,4BAAA,eAAA;AACAA,EAAAA,qCAAA,wBAAA;AACAA,EAAAA,sBAAA,SAAA;AACAA,EAAAA,wBAAA,WAAA;AACAA,EAAAA,wBAAA,WAAA;AACAA,EAAAA,+BAAA,kBAAA;AACD,CAbD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;;;;;;;;;"}