{"version":3,"file":"twitch-simple-irc.cjs.production.min.js","sources":["../src/client.ts","../src/utils.ts","../src/parse.ts","../src/normalize.ts","../src/types.ts"],"sourcesContent":["import tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\nimport * as tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  MessageEvent,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  UserStateEvent,\n  UserStateTags,\n  RoomStateEvent,\n  RoomStateTags,\n  ClearChatEvent,\n  ClearMessageEvent,\n  HostTargetEvent,\n  NoticeEvent,\n  UserNoticeEvent,\n  WhisperEvent,\n  JoinEvent,\n  PartEvent,\n  PingEvent,\n} from './types';\nimport { isNode, getChannelFromMessage, getRandomUsername } from './utils';\nimport {\n  normalizeChatMessage,\n  normalizeState,\n  normalizeCommand,\n  normalizeWhisper,\n  normalizeGlobalUserState,\n} from './normalize';\n\nexport enum Commands {\n  REPLY001 = '001',\n  PING = 'PING',\n  PONG = 'PONG',\n  JOIN = 'JOIN',\n  PART = 'PART',\n  PRIVMSG = 'PRIVMSG',\n  NOTICE = 'NOTICE',\n  USERNOTICE = 'USERNOTICE',\n  GLOBALUSERSTATE = 'GLOBALUSERSTATE',\n  USERSTATE = 'USERSTATE',\n  ROOMSTATE = 'ROOMSTATE',\n  CLEARCHAT = 'CLEARCHAT',\n  CLEARMSG = 'CLEARMSG',\n  HOSTTARGET = 'HOSTTARGET',\n  WHISPER = 'WHISPER',\n}\n\ninterface ClientOptions {\n  name?: string;\n  auth?: string;\n  secure?: boolean;\n}\n\ninterface Channels {\n  [channel: string]: {\n    userState: UserStateTags;\n    roomState: RoomStateTags;\n  };\n}\n\ntype Listener<T> = (data: T) => void;\n\nexport interface Client {\n  on(event: 'connect', listener: () => void): this;\n  on(event: 'disconnect', listener: (error?: Error) => void): this;\n  on(event: 'register', listener: () => void): this;\n  on(event: 'message', listener: Listener<MessageEvent>): this;\n  on(event: 'notice', listener: Listener<NoticeEvent>): this;\n  on(event: 'usernotice', listener: Listener<UserNoticeEvent>): this;\n  on(event: 'whisper', listener: Listener<WhisperEvent>): this;\n  on(event: 'globaluserstate', listener: Listener<GlobalUserStateEvent>): this;\n  on(event: 'userstate', listener: Listener<UserStateEvent>): this;\n  on(event: 'roomstate', listener: Listener<RoomStateEvent>): this;\n  on(event: 'join', listener: Listener<JoinEvent>): this;\n  on(event: 'part', listener: Listener<PartEvent>): this;\n  on(event: 'clearchat', listener: Listener<ClearChatEvent>): this;\n  on(event: 'clearmessage', listener: Listener<ClearMessageEvent>): this;\n  on(event: 'hosttarget', listener: Listener<HostTargetEvent>): this;\n  on(event: 'ping', listener: Listener<PingEvent>): this;\n  on(event: 'error', listener: (error: Error) => void): this;\n\n  emit(event: 'connect'): boolean;\n  emit(event: 'disconnect', error?: Error): boolean;\n  emit(event: 'register'): boolean;\n  emit(event: 'message', data: MessageEvent): boolean;\n  emit(event: 'notice', data: NoticeEvent): boolean;\n  emit(event: 'usernotice', data: UserNoticeEvent): boolean;\n  emit(event: 'whisper', data: WhisperEvent): boolean;\n  emit(event: 'globaluserstate', data: GlobalUserStateEvent): boolean;\n  emit(event: 'userstate', data: UserStateEvent): boolean;\n  emit(event: 'roomstate', data: RoomStateEvent): boolean;\n  emit(event: 'join', data: JoinEvent): boolean;\n  emit(event: 'part', data: PartEvent): boolean;\n  emit(event: 'clearchat', data: ClearChatEvent): boolean;\n  emit(event: 'clearmessage', data: ClearMessageEvent): boolean;\n  emit(event: 'hosttarget', data: HostTargetEvent): boolean;\n  emit(event: 'ping', data: PingEvent): boolean;\n  emit(event: 'error', error: Error): boolean;\n}\n\nexport class Client extends EventEmitter {\n  socket: WebSocket | Socket | null = null;\n\n  options: ClientOptions;\n\n  globalUserState: GlobalUserStateTags | null = null;\n\n  channels: Channels = {};\n\n  private _connected: boolean = false;\n\n  private _connecting: boolean = false;\n\n  private _registered: boolean = false;\n\n  constructor(options: ClientOptions = {}) {\n    super();\n    this.options = { secure: true, ...options };\n  }\n\n  async connect(): Promise<void> {\n    const connection = isNode\n      ? this._connectInNode()\n      : this._connectInBrowser();\n\n    await connection;\n\n    return this._register();\n  }\n\n  receiveRaw(rawData: string) {\n    const data = rawData.trim().split('\\r\\n');\n\n    data.forEach((line) => this._handleMessage(line));\n  }\n\n  sendRaw(message: string): boolean {\n    if (this.socket === null || !message) {\n      return false;\n    }\n\n    if (isNode) {\n      (this.socket as Socket).write(message);\n    } else {\n      (this.socket as WebSocket).send(message);\n    }\n\n    return true;\n  }\n\n  say(channel: string, message: string): boolean {\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: message,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  sendCommand(\n    channel: string,\n    command: string,\n    params: string | Array<string> = '',\n  ): boolean {\n    const commandParams = Array.isArray(params) ? params.join(' ') : params;\n    const ircMessage = tekko.format({\n      command: Commands.PRIVMSG,\n      middle: [`#${channel}`],\n      trailing: `/${command} ${commandParams}`,\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  join(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.JOIN,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  part(channel: string): boolean {\n    if (!this._registered) return false;\n\n    const ircMessage = tekko.format({\n      command: Commands.PART,\n      middle: [`#${channel}`],\n    });\n\n    return this.sendRaw(ircMessage);\n  }\n\n  _handleMessage(raw: string) {\n    const data: TekkoMessage = tekko.parse(raw) as TekkoMessage;\n    data.raw = raw;\n    const { command } = data;\n\n    if (command === Commands.PING) {\n      this.sendRaw(`${Commands.PONG} :tmi.twitch.tv`);\n      this.emit('ping', { raw });\n\n      return;\n    }\n\n    if (command === Commands.REPLY001) {\n      this.options.name = data.middle[0];\n      this._registered = true;\n\n      this.emit('register');\n\n      return;\n    }\n\n    if (command === Commands.PRIVMSG) {\n      const eventData = normalizeChatMessage(data);\n\n      this.emit('message', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as UserStateEvent;\n\n      this._updateUserState(channel, eventData.tags);\n      this.emit('userstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.JOIN) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as JoinEvent;\n\n      this.emit('join', eventData);\n\n      return;\n    }\n\n    if (command === Commands.PART) {\n      const channel = getChannelFromMessage(data);\n      const eventData = { channel } as PartEvent;\n\n      this.emit('part', eventData);\n\n      return;\n    }\n\n    if (command === Commands.ROOMSTATE) {\n      const channel = getChannelFromMessage(data);\n      const eventData = normalizeState(data) as RoomStateEvent;\n\n      this._updateRoomState(channel, eventData.tags);\n      this.emit('roomstate', eventData);\n\n      return;\n    }\n\n    if (command === Commands.NOTICE) {\n      const eventData = normalizeCommand(data) as NoticeEvent;\n\n      this.emit('notice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.USERNOTICE) {\n      const eventData = (normalizeCommand(data) as unknown) as UserNoticeEvent;\n\n      this.emit('usernotice', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARCHAT) {\n      const eventData = normalizeCommand(data) as ClearChatEvent;\n\n      this.emit('clearchat', eventData);\n\n      return;\n    }\n\n    if (command === Commands.CLEARMSG) {\n      const eventData = normalizeCommand(data) as ClearMessageEvent;\n\n      this.emit('clearmessage', eventData);\n\n      return;\n    }\n\n    if (command === Commands.HOSTTARGET) {\n      const eventData = normalizeCommand(data) as HostTargetEvent;\n\n      this.emit('hosttarget', eventData);\n\n      return;\n    }\n\n    if (command === Commands.WHISPER) {\n      const eventData = normalizeWhisper(data);\n\n      this.emit('whisper', eventData);\n\n      return;\n    }\n\n    if (command === Commands.GLOBALUSERSTATE) {\n      const eventData = normalizeGlobalUserState(data);\n\n      this._updateGlobalUserState(eventData.tags);\n      this.emit('globaluserstate', eventData);\n\n      return;\n    }\n  }\n\n  _connectInNode(): Promise<void> {\n    const host = 'irc.chat.twitch.tv';\n    const port = this.options.secure ? 6697 : 6667;\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n\n      const handleConnect = () => {\n        this._connecting = false;\n        this._connected = true;\n        this.emit('connect');\n        resolve();\n      };\n\n      if (this.options.secure) {\n        this.socket = tls.connect(port, host, {}, handleConnect);\n      } else {\n        this.socket = new Socket();\n        this.socket.connect(port, host, handleConnect);\n      }\n\n      this.socket.on('error', (error: Error) => {\n        this._connected = false;\n        this._connecting = false;\n        this.emit('disconnect', error);\n        reject(error);\n      });\n      this.socket.on('data', (data: Buffer) => {\n        this.receiveRaw(data.toString());\n      });\n      this.socket.on('close', () => {\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n        this.emit('disconnect');\n      });\n    });\n  }\n\n  _connectInBrowser(): Promise<void> {\n    const url = this.options.secure\n      ? 'wss://irc-ws.chat.twitch.tv:443'\n      : 'ws://irc-ws.chat.twitch.tv:80';\n\n    return new Promise<void>((resolve, reject) => {\n      this._connecting = true;\n      this.socket = new WebSocket(url);\n\n      this.socket.onopen = () => {\n        this._connected = true;\n        this._connecting = false;\n        this.emit('connect');\n        resolve();\n      };\n      this.socket.onmessage = ({ data }) => this.receiveRaw(data);\n      this.socket.onerror = () => {};\n      this.socket.onclose = ({ wasClean, code, reason }) => {\n        this.socket = null;\n        this._connected = false;\n        this._connecting = false;\n        this._registered = false;\n\n        if (wasClean) {\n          this.emit('disconnect');\n        } else {\n          const error = new Error(`[${code}] ${reason}`);\n          this.emit('disconnect', error);\n          reject(error);\n        }\n      };\n    });\n  }\n\n  _register(): Promise<void> {\n    if (!this._connected) return Promise.reject();\n    if (this._registered) return Promise.resolve();\n\n    const { name, auth } = this.options;\n\n    const nick = name || getRandomUsername();\n    const pass = auth ? `oauth:${auth}` : 'SCHMOOPIIE';\n\n    this.sendRaw('CAP REQ :twitch.tv/tags twitch.tv/commands');\n    this.sendRaw(`PASS ${pass}`);\n    this.sendRaw(`NICK ${nick}`);\n\n    return new Promise<void>((resolve, reject) => {\n      const handleRegister = () => {\n        resolve();\n        this.off('register', handleRegister);\n      };\n\n      this.on('register', handleRegister);\n\n      setTimeout(() => {\n        reject();\n        this.off('register', handleRegister);\n      }, 10000);\n    });\n  }\n\n  _updateGlobalUserState(globalUserState: GlobalUserStateTags) {\n    this.globalUserState = { ...this.globalUserState, ...globalUserState };\n  }\n\n  _updateUserState(channel: string, userState: UserStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        userState,\n      },\n    };\n  }\n\n  _updateRoomState(channel: string, roomState: RoomStateTags) {\n    this.channels = {\n      ...this.channels,\n      [channel]: {\n        ...this.channels[channel],\n        roomState,\n      },\n    };\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get registered() {\n    return this._registered;\n  }\n}\n\nexport default Client;\n","import tekko from 'tekko';\n\nexport const getRandomUsername = (): string => {\n  const randomSuffix = Math.floor(Math.random() * 100000)\n    .toString()\n    .padStart(5, '0');\n  return `justinfan${randomSuffix}`;\n};\n\nexport const getIsAction = (message: string): boolean =>\n  message.startsWith('\\u0001ACTION ') && message.endsWith('\\u0001');\n\nexport const normalizeActionMessage = (message: string): string =>\n  message.slice(8, -1);\n\nexport const getChannelFromMessage = (message: tekko.Message): string =>\n  message.middle[0].slice(1);\n\nexport const isNode = !!(\n  typeof process !== 'undefined' &&\n  process.versions &&\n  process.versions.node\n);\n","import tekko from 'tekko';\nimport { Emotes, BadgeInfo, Badges, TagType, Tags } from './types';\n\nconst booleanMessageTags = [\n  'mod',\n  'emote-only',\n  'r9k',\n  'rituals',\n  'subs-only',\n  'msg-param-should-share-streak',\n];\n\nconst numberMessageTags = [\n  'tmi-sent-ts',\n  'bits',\n  'ban-duration',\n  'msg-param-cumulative-months',\n  'msg-param-months',\n  'msg-param-promo-gift-total',\n  'msg-param-streak-months',\n  'msg-param-viewerCount',\n  'msg-param-threshold',\n];\n\nconst tagNamesMap: { [key: string]: string } = {\n  'badge-info': 'badgeInfo',\n  'display-name': 'displayName',\n  'emote-sets': 'emoteSets',\n  'room-id': 'roomId',\n  'tmi-sent-ts': 'tmiSendTs',\n  'user-id': 'userId',\n  'target-msg-id': 'targetMsgId',\n  'msg-id': 'msgId',\n  'system-msg': 'systemMsg',\n  'emote-only': 'emoteOnly',\n  'followers-only': 'followersOnly',\n  'subs-only': 'subsOnly',\n  'ban-duration': 'banDuration',\n  'message-id': 'messageId',\n  'thread-id': 'threadId',\n  'msg-param-cumulative-months': 'msgParamСumulativeMonths',\n  'msg-param-displayName': 'msgParamDisplayName',\n  'msg-param-login': 'msgParamLogin',\n  'msg-param-months': 'msgParamMonths',\n  'msg-param-promo-gift-total': 'msgParamPromoGiftTotal',\n  'msg-param-promo-name': 'msgParamPromoName',\n  'msg-param-recipient-display-name': 'msgParamRecipientDisplayName',\n  'msg-param-recipient-id': 'msgParamRecipientId',\n  'msg-param-recipient-user-name': 'msgParamRecipientUserName',\n  'msg-param-sender-login': 'msgParamSenderLogin',\n  'msg-param-sender-name': 'msgParamSenderName',\n  'msg-param-should-share-streak': 'msgParamShouldShareStreak',\n  'msg-param-streak-months': 'msgParamStreakMonths',\n  'msg-param-sub-plan': 'msgParamSubPlan',\n  'msg-param-sub-plan-name': 'msgParamSubPlanName',\n  'msg-param-viewerCount': 'msgParamViewerCount',\n  'msg-param-ritual-name': 'msgParamRitualName',\n  'msg-param-threshold': 'msgParamThreshold',\n};\n\nconst depricatedMessageTags = ['subscriber', 'turbo', 'user-type'];\n\nconst parseMessageEmotes = (raw: string = ''): Emotes => {\n  if (!raw) return {};\n\n  return raw.split('/').reduce((acc, emote) => {\n    const [id, indexes] = emote.split(':');\n\n    return {\n      ...acc,\n      [id]: indexes.split(',').map((index) => {\n        const [start, end] = index.split('-');\n\n        return {\n          start: Number.parseInt(start, 10),\n          end: Number.parseInt(end, 10),\n        };\n      }),\n    };\n  }, {});\n};\n\nconst parseBadges = (data: string = ''): BadgeInfo | Badges => {\n  if (!data) return {};\n\n  return data.split(',').reduce((acc, badge) => {\n    const [name, value] = badge.split('/');\n\n    return {\n      ...acc,\n      [name]: value,\n    };\n  }, {});\n};\n\nconst normalizeTagValue = (name: string, value: string): TagType => {\n  if (name === 'emotes') return parseMessageEmotes(value);\n  if (name === 'badges') return parseBadges(value);\n  if (name === 'badge-info') return parseBadges(value);\n\n  if (name === 'followers-only') {\n    let followersOnly: boolean | number = false;\n    if (value === '-1') {\n      followersOnly = false;\n    } else if (value === '0') {\n      followersOnly = true;\n    } else if (typeof value === 'string') {\n      followersOnly = parseInt(value, 10);\n    }\n    return followersOnly;\n  }\n\n  if (name === 'slow') {\n    let slow: boolean | number = false;\n    if (value === '0') {\n      slow = false;\n    } else if (typeof value === 'string') {\n      slow = parseInt(value, 10);\n    }\n    return slow;\n  }\n\n  if (booleanMessageTags.includes(name)) return value === '1';\n  if (numberMessageTags.includes(name)) return parseInt(value, 10);\n\n  if (typeof value === 'string') {\n    return value.replace('\\\\s', ' ');\n  }\n\n  return value;\n};\n\nexport const parseMessageTags = (data?: tekko.MessageTags): Tags => {\n  if (!data) {\n    return {};\n  }\n\n  return Object.entries(data).reduce((acc, [key, value]) => {\n    if (depricatedMessageTags.includes(key)) {\n      return acc;\n    }\n\n    const newKey = tagNamesMap[key] || key;\n\n    return {\n      ...acc,\n      [newKey]: normalizeTagValue(key, value as string),\n    };\n  }, {});\n};\n","import tekko from 'tekko';\n\nimport {\n  TekkoMessage,\n  GlobalUserStateEvent,\n  GlobalUserStateTags,\n  MessageEvent,\n  MessageTags,\n  WhisperEvent,\n  WhisperTags,\n} from './types';\nimport {\n  getIsAction,\n  normalizeActionMessage,\n  getChannelFromMessage,\n} from './utils';\nimport { parseMessageTags } from './parse';\n\nexport const normalizeChatMessage = (data: TekkoMessage): MessageEvent => {\n  const { raw, trailing, tags, prefix } = data;\n  const { name } = prefix as tekko.MessagePrefix;\n  const isAction = getIsAction(trailing);\n\n  return {\n    raw,\n    message: isAction ? normalizeActionMessage(trailing) : trailing,\n    channel: getChannelFromMessage(data),\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as MessageTags;\n    },\n    isAction,\n  };\n};\n\nexport const normalizeGlobalUserState = ({\n  raw,\n  tags,\n}: TekkoMessage): GlobalUserStateEvent => ({\n  raw,\n  get tags() {\n    return parseMessageTags(tags) as GlobalUserStateTags;\n  },\n});\n\nexport const normalizeState = (data: TekkoMessage) => {\n  const { raw, tags } = data;\n\n  return {\n    raw,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeCommand = (data: TekkoMessage) => {\n  const { raw, trailing, tags } = data;\n\n  return {\n    raw,\n    message: trailing,\n    channel: getChannelFromMessage(data),\n    get tags() {\n      return parseMessageTags(tags);\n    },\n  };\n};\n\nexport const normalizeWhisper = ({\n  raw,\n  trailing,\n  tags,\n  prefix,\n  middle: [channel],\n}: TekkoMessage): WhisperEvent => {\n  const { name } = prefix as tekko.MessagePrefix;\n\n  return {\n    raw,\n    message: trailing,\n    channel,\n    user: name,\n    get tags() {\n      return (parseMessageTags(tags) as unknown) as WhisperTags;\n    },\n  };\n};\n","import tekko from 'tekko';\n\nexport interface TekkoMessage extends tekko.Message {\n  raw: string;\n}\n\nexport interface Emotes {\n  [emoteId: string]: Array<{ start: number; end: number }>;\n}\n\nexport interface BadgeInfo {\n  /**\n   * The exact number of months the user has been a subscriber.\n   */\n  subscriber?: number;\n}\n\nexport interface Badges {\n  admin?: string;\n  bits?: string;\n  broadcaster?: string;\n  global_mod?: string;\n  moderator?: string;\n  subscriber?: string;\n  staff?: string;\n  turbo?: string;\n}\n\nexport type TagType = string | boolean | number | Emotes | BadgeInfo | Badges;\n\nexport interface Tags {\n  [key: string]: TagType;\n}\n\ninterface ATags {\n  /**\n   * Metadata related to the chat badges in the `badges` tag.\n   */\n  badgeInfo: BadgeInfo;\n\n  /**\n   * List of chat badges and the version of each badge.\n   * Many badges have only 1 version, but some badges have different versions (images), depending on how long you hold the badge status; e.g., `subscriber`.\n   */\n  badges: Badges;\n\n  /**\n   * Hexadecimal RGB color code; the empty string if it is never set.\n   */\n  color: string;\n\n  /**\n   * The user’s display name, escaped as described in the IRCv3 spec. This is empty if it is never set.\n   */\n  displayName: string;\n\n  /**\n   * Your emote set, a comma-separated list of emote sets.\n   */\n  emoteSets: string;\n\n  /**\n   * Information to replace text in the message with emote images. This can be empty.\n   */\n  emotes: Emotes;\n\n  /**\n   * A unique ID for the message.\n   */\n  id: string;\n\n  /**\n   * `true` if the user has a moderator badge; otherwise, `false`.\n   */\n  mod: boolean;\n\n  /**\n   * The channel ID.\n   */\n  roomId: string;\n\n  /**\n   * Timestamp when the server received the message.\n   */\n  tmiSentTs: number;\n\n  /**\n   * The user’s ID.\n   */\n  userId: string;\n}\n\nexport interface MessageTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * (Sent only for Bits messages) The amount of cheer/Bits employed by the user.\n   */\n  bits?: number;\n}\n\n/**\n * Sends a message to a channel.\n */\nexport interface MessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: MessageTags;\n  isAction: boolean;\n}\n\nexport type GlobalUserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'userId'\n>;\n\n/**\n * On successful login, provides data about the current logged-in user through IRC tags.\n * It is sent after successfully authenticating (sending a PASS/NICK command).\n */\nexport interface GlobalUserStateEvent {\n  raw: string;\n  tags: GlobalUserStateTags;\n}\n\nexport type UserStateTags = Pick<\n  ATags,\n  'badgeInfo' | 'badges' | 'color' | 'displayName' | 'emoteSets' | 'mod'\n>;\n\n/**\n * Sends user-state data when a user joins a channel or sends a PRIVMSG to a channel.\n */\nexport interface UserStateEvent {\n  raw: string;\n  channel: string;\n  tags: UserStateTags;\n}\n\nexport interface RoomStateTags {\n  /**\n   * Emote-only mode. If enabled, only emotes are allowed in chat.\n   */\n  emoteOnly?: boolean;\n\n  /**\n   * Followers-only mode. If enabled, controls which followers can chat.\n   * Valid values:\n   * -1 (disabled),\n   * false (all followers can chat),\n   * non-negative integer (only users following for at least the specified number of minutes can chat).\n   */\n  followersOnly?: boolean | number;\n\n  /**\n   * R9K mode. If enabled, messages with more than 9 characters must be unique.\n   */\n  r9k?: boolean;\n\n  /**\n   * (Not documented)\n   */\n  rituals?: boolean;\n\n  /**\n   * The number of seconds a chatter without moderator privileges must wait between sending messages.\n   */\n  slow?: boolean | number;\n\n  /**\n   * Subscribers-only mode. If enabled, only subscribers and moderators can chat.\n   */\n  subsOnly?: boolean;\n}\n\n/**\n * Sends room-state data when a user joins a channel or a room setting is changed.\n * For a join, the message contains all chat-room settings.\n * For changes, only the relevant tag is sent.\n */\nexport interface RoomStateEvent {\n  raw: string;\n  channel: string;\n  tags: RoomStateTags;\n}\n\n/**\n * Purges all chat messages in a channel, or purges chat messages from a specific user (typically after a timeout or ban).\n */\nexport interface ClearChatEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Duration of the timeout, in seconds. If omitted, the ban is permanent.\n     */\n    banDuration?: number;\n\n    /**\n     * (Not documented)\n     */\n    roomId: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Removes a single message from a channel. This is triggered by the `/delete <targetMsgId>` command on IRC.\n */\nexport interface ClearMessageEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * Name of the user who sent the message.\n     */\n    login: string;\n\n    /**\n     * UUID of the message.\n     */\n    targetMsgId: string;\n\n    /**\n     * (Not documented)\n     */\n    tmiSentTs: number;\n  };\n}\n\n/**\n * Channel starts or stops host mode.\n */\nexport interface HostTargetEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {};\n}\n\n/**\n * General notices from the server.\n */\nexport interface NoticeEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  tags: {\n    /**\n     * A message ID string. Can be used for i18ln.\n     * Valid values: see https://dev.twitch.tv/docs/irc/msg-id\n     */\n    msgId: string;\n  };\n}\n\nexport enum UserNoticeType {\n  sub = 'sub',\n  resub = 'resub',\n  subgift = 'subgift',\n  anonsubgift = 'anonsubgift',\n  submysterygift = 'submysterygift',\n  giftpaidupgrade = 'giftpaidupgrade',\n  rewardgift = 'rewardgift',\n  anongiftpaidupgrade = 'anongiftpaidupgrade',\n  raid = 'raid',\n  unraid = 'unraid',\n  ritual = 'ritual',\n  bitsbadgetier = 'bitsbadgetier',\n}\n\ninterface AUserNoticeTags {\n  /**\n   * (Sent only on sub, resub) The total number of months the user has subscribed.\n   * This is the same as msg-param-months but sent for different types of user notices.\n   */\n  msgParamCumulativeMonths: number;\n\n  /**\n   * (Sent only on raid) The display name of the source user raiding this channel.\n   */\n  msgParamDisplayName: string;\n\n  /**\n   * (Sent on only raid) The name of the source user raiding this channel.\n   */\n  msgParamLogin: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The total number of months the user has subscribed.\n   * This is the same as msg-param-cumulative-months but sent for different types of user notices.\n   */\n  msgParamMonths: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The number of gifts the gifter has given during the promo indicated by msg-param-promo-name.\n   */\n  msgParamPromoGiftTotal: number;\n\n  /**\n   * (Sent only on anongiftpaidupgrade, giftpaidupgrade) The subscriptions promo, if any, that is ongoing; e.g. Subtember 2018.\n   */\n  msgParamPromoName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The display name of the subscription gift recipient.\n   */\n  msgParamRecipientDisplayName: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user ID of the subscription gift recipient.\n   */\n  msgParamRecipientId: string;\n\n  /**\n   * (Sent only on subgift, anonsubgift) The user name of the subscription gift recipient.\n   */\n  msgParamRecipientUserName: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The login of the user who gifted the subscription.\n   */\n  msgParamSenderLogin: string;\n\n  /**\n   * (Sent only on giftpaidupgrade) The display name of the user who gifted the subscription.\n   */\n  msgParamSenderName: string;\n\n  /**\n   * (Sent only on sub, resub) Boolean indicating whether users want their streaks to be shared.\n   */\n  msgParamShouldShareStreak: boolean;\n\n  /**\n   * (Sent only on sub, resub) The number of consecutive months the user has subscribed. This is 0 if msg-param-should-share-streak is 0.\n   */\n  msgParamStreakMonths: number;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The type of subscription plan being used.\n   * Valid values: Prime, 1000, 2000, 3000. 1000, 2000, and 3000 refer to the first, second, and third levels of paid subscriptions, respectively (currently $4.99, $9.99, and $24.99).\n   */\n  msgParamSubPlan: string;\n\n  /**\n   * (Sent only on sub, resub, subgift, anonsubgift) The display name of the subscription plan.\n   * This may be a default name or one created by the channel owner.\n   */\n  msgParamSubPlanName: string;\n\n  /**\n   * (Sent only on raid) The number of viewers watching the source channel raiding this channel.\n   */\n  msgParamViewerCount: number;\n\n  /**\n   * (Sent only on ritual) The name of the ritual this notice is for. Valid value: new_chatter.\n   */\n  msgParamRitualName: string;\n\n  /**\n   * (Sent only on bitsbadgetier) The tier of the bits badge the user just earned; e.g. 100, 1000, 10000.\n   */\n  msgParamThreshold: number;\n}\n\ninterface ABaseUserNoticeTags\n  extends Pick<\n    ATags,\n    | 'badgeInfo'\n    | 'badges'\n    | 'color'\n    | 'displayName'\n    | 'emotes'\n    | 'id'\n    | 'mod'\n    | 'roomId'\n    | 'tmiSentTs'\n    | 'userId'\n  > {\n  /**\n   * The name of the user who sent the notice.\n   */\n  login: string;\n\n  /**\n   * The message printed in chat along with this notice.\n   */\n  systemMsg: string;\n}\n\ninterface UserNoticeTagsSub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  /**\n   * The type of notice (not the ID).\n   */\n  msgId: 'sub';\n}\n\ninterface UserNoticeTagsResub\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamCumulativeMonths'\n      | 'msgParamShouldShareStreak'\n      | 'msgParamStreakMonths'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'resub';\n}\n\ninterface UserNoticeTagsSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'subgift';\n}\n\ninterface UserNoticeTagsAnonSubGift\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamMonths'\n      | 'msgParamRecipientDisplayName'\n      | 'msgParamRecipientId'\n      | 'msgParamRecipientUserName'\n      | 'msgParamSubPlan'\n      | 'msgParamSubPlanName'\n    > {\n  msgId: 'anonsubgift';\n}\n\ninterface UserNoticeTagsSubMysteryGift extends ABaseUserNoticeTags {\n  msgId: 'submysterygift';\n}\n\ninterface UserNoticeTagsGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      | 'msgParamPromoGiftTotal'\n      | 'msgParamPromoName'\n      | 'msgParamSenderLogin'\n      | 'msgParamSenderName'\n    > {\n  msgId: 'giftpaidupgrade';\n}\n\ninterface UserNoticeTagsAnonGiftPaidUpgrade\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamPromoGiftTotal' | 'msgParamPromoName'> {\n  msgId: 'anongiftpaidupgrade';\n}\n\ninterface UserNoticeTagsRewardGift extends ABaseUserNoticeTags {\n  msgId: 'rewardgift';\n}\n\ninterface UserNoticeTagsRaid\n  extends ABaseUserNoticeTags,\n    Pick<\n      AUserNoticeTags,\n      'msgParamDisplayName' | 'msgParamLogin' | 'msgParamViewerCount'\n    > {\n  msgId: 'raid';\n}\n\ninterface UserNoticeTagsUnraid extends ABaseUserNoticeTags {\n  msgId: 'unraid';\n}\n\ninterface UserNoticeTagsRitual\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamRitualName'> {\n  msgId: 'ritual';\n}\n\ninterface UserNoticeTagsBitsBadGetier\n  extends ABaseUserNoticeTags,\n    Pick<AUserNoticeTags, 'msgParamThreshold'> {\n  msgId: 'bitsbadgetier';\n}\n\ntype UserNoticeTags =\n  | UserNoticeTagsSub\n  | UserNoticeTagsResub\n  | UserNoticeTagsSubGift\n  | UserNoticeTagsAnonSubGift\n  | UserNoticeTagsSubMysteryGift\n  | UserNoticeTagsGiftPaidUpgrade\n  | UserNoticeTagsAnonGiftPaidUpgrade\n  | UserNoticeTagsRewardGift\n  | UserNoticeTagsRaid\n  | UserNoticeTagsUnraid\n  | UserNoticeTagsRitual\n  | UserNoticeTagsBitsBadGetier;\n\n/**\n * Sends a notice to the user when any of the following events occurs:\n * - Subscription, resubscription, or gift subscription to a channel.\n * - Incoming raid to a channel.\n *   Raid is a Twitch tool that allows broadcasters to send their viewers to another channel, to help support and grow other members in the community.\n * - Channel ritual.\n *   Many channels have special rituals to celebrate viewer milestones when they are shared.\n *   The rituals notice extends the sharing of these messages to other viewer milestones (initially, a new viewer chatting for the first time).\n */\nexport interface UserNoticeEvent {\n  raw: string;\n  /**\n   * The message. This is omitted if the user did not enter a message.\n   */\n  message: string;\n  channel: string;\n  tags: UserNoticeTags;\n}\n\nexport interface WhisperTags\n  extends Pick<\n    ATags,\n    'badges' | 'color' | 'displayName' | 'emotes' | 'userId'\n  > {\n  /**\n   * (Not documented)\n   */\n  messageId: string;\n\n  /**\n   * (Not documented)\n   */\n  threadId: string;\n}\n\n/**\n * (Not documented)\n */\nexport interface WhisperEvent {\n  raw: string;\n  message: string;\n  channel: string;\n  user: string;\n  tags: WhisperTags;\n}\n\nexport interface PingEvent {\n  raw: string;\n}\n\n/**\n * Join a channel.\n */\nexport interface JoinEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n\n/**\n * Depart from a channel.\n */\nexport interface PartEvent {\n  raw: string;\n  channel: string;\n  user: string;\n}\n"],"names":["Commands","getRandomUsername","Math","floor","random","toString","padStart","getIsAction","message","startsWith","endsWith","normalizeActionMessage","slice","getChannelFromMessage","middle","isNode","process","versions","node","booleanMessageTags","numberMessageTags","tagNamesMap","depricatedMessageTags","parseBadges","data","split","reduce","acc","badge","parseMessageTags","Object","entries","key","value","includes","name","raw","emote","map","index","end","start","Number","parseInt","followersOnly","slow","replace","normalizeTagValue","normalizeState","tags","channel","normalizeCommand","trailing","UserNoticeType","Client","options","secure","connect","this","connection","_this3","_connectInNode","_connectInBrowser","_register","receiveRaw","rawData","trim","forEach","line","_this4","_handleMessage","sendRaw","socket","write","send","say","ircMessage","tekko","command","PRIVMSG","sendCommand","params","commandParams","Array","isArray","join","_registered","JOIN","part","PART","PING","PONG","emit","REPLY001","USERSTATE","eventData","_updateUserState","ROOMSTATE","_updateRoomState","NOTICE","USERNOTICE","CLEARCHAT","CLEARMSG","HOSTTARGET","WHISPER","GLOBALUSERSTATE","normalizeGlobalUserState","_updateGlobalUserState","user","prefix","isAction","normalizeChatMessage","host","port","Promise","resolve","reject","_this5","_connecting","handleConnect","_connected","tls","Socket","on","error","url","_this6","WebSocket","onopen","onmessage","onerror","onclose","wasClean","code","reason","Error","auth","nick","pass","handleRegister","_this7","off","setTimeout","globalUserState","userState","channels","roomState","EventEmitter"],"mappings":"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"}